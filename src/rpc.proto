syntax="proto2";
import "config.proto";
package tpc.Network;

enum RequestType {
    Req_Type_Begin = 1;
    Req_Type_Prepare = 2;
    Req_Type_Commit = 3;
    Req_Type_Rollback = 5;
    Req_Type_Delete = 6;
    Req_Type_Insert = 7;
    Req_Type_Update = 8;
    Req_Type_Get = 9;
}

message RpcReq {
    //begin get update prepare commit rollback
    optional RequestType request_type = 2;//1--begin    3--prepare  4--commit 5--rollback   6--delete 7--insert 8--update 9--get
    optional string begin_ts = 3;
    optional string key = 4;
    optional string value = 5;
    optional string start_ts = 6; // prepare(start_ts, transList)
    optional string commit_ts = 7; // commit(commit_ts) or rollback(commit_ts)
    repeated tpc.Config.Host trans_list = 8;//
}

message RpcRes {
    optional uint32 result = 1;//0--success,  else--err
    optional string err_msg = 2;//
    optional string begin_ts = 3;
    optional string key = 4;
    optional string value = 5;
    optional string start_ts = 6;
    optional string commit_ts = 7;

}

message CliReq {
    //begin get update commit rollback
    optional RequestType request_type = 2;//1--begin   4--commit 5--rollback    6--delete 7--insert 8--update 9--get
    optional string begin_ts = 3;
    optional string key = 4;
    optional string value = 5;
}

message CliRes {
    optional uint32 result = 1;//0--success,  else--err
    optional string err_msg = 2;//
    optional string begin_ts = 3;
    optional string key = 4;
    optional string value = 5;
    optional string start_ts = 6;
    optional string commit_ts = 7;
}

enum TransState {
    TransStateBegin = 1;
    TransStatePrepared = 2;
    TransStateCommited = 3;
    TransStateRollback = 4;

}

message TransStateReq {
    optional tpc.Config.Host host = 1; //请求端
    optional TransState trans_stat = 2;// 事务状态 1--begin 2--prepared 3--commited 4--rollback
    optional string begin_ts = 3; //请求端事务id
    optional string commit_ts = 4; //请求端commit_ts 如果事务状态为prepared, 则commit_ts表示prepared返回前取的commit_ts
}

message TransStateRes {
    optional tpc.Config.Host host = 1; //返回端
    optional TransState trans_stat = 2;//事务状态 1--begin 2--prepared 3--commited 4--rollback
    optional string begin_ts = 3; //返回端事务id
    optional string commit_ts = 4; //返回端commit_ts
    optional uint32 result = 5;//0--success,  else--err
    optional string err_msg = 6;
}

enum MsgType {
    MSG_Type_Rpc_Request = 1;
    MSG_Type_Rpc_Response = 2;
    MSG_Type_Cli_Request = 3;
    MSG_Type_Cli_Response = 4;
    MSG_Type_TransState_Request = 5;
    MSG_Type_TransState_Response = 6;
};

message Msg {
    optional string group_id = 1;
    optional MsgType msg_type = 2;
    oneof MsgContent{
        RpcReq rpc_request = 5;
        RpcRes rpc_response = 6;
        CliReq cli_request = 7;
        CliRes cli_response = 8;
        TransStateReq trans_state_request = 9;
        TransStateRes trans_state_response = 10;
    }
};
